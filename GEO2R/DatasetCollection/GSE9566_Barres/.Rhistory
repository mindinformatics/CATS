match(colnames(eset.m), myDonorInfo$rnaseq_profile_id)
match(colnames(eset.m))
colnames(eset.m)
weights<-fread(file = "../../../Data/group_weights.csv")
myDonorInfo<-fread(file="../../../Data/gene_expression_matrix/columns-samples.csv")
myDonorInfo$weight<-weights$Weight[match(myDonorInfo$donor_name, weights$Donor)]
names(myDonorInfo)
myDonorInfo$rna_well_id
myDonorInfo$rnaseq_profile_id
myDonorInfo<-readinDonor()
myDonorInfo$rnaseq_profile_id
colnames(eset.m)
as.numeric(colnames(eset.m))
?grep
regexpr( {[0-9]+:[0-9]+}, colnames(eset.m) )
regexpr( pattern = {[0-9]+:[0-9]+}, colnames(eset.m) )
regexpr( pattern = {\d+:\d+}, colnames(eset.m) )
regexpr( pattern = "{\d+:\d+}", colnames(eset.m) )
regexpr( pattern = "{[0-9]+:[0-9]+}", colnames(eset.m) )
regexpr( pattern = "\{[0-9]+:[0-9]+}", colnames(eset.m) )
gsub(paste("_", tissuename, sep=""), "", colnames(eset.m))
as.numeric(gsub(paste("_", tissuename, sep=""), "", colnames(eset.m)))
ColNames<-as.numeric(gsub(paste("_", tissuename, sep=""), "", colnames(eset.m)))
match(ColNames,myDonorInfo$rnaseq_profile_id)
weights<-fread(file = "../../../Data/group_weights.csv")
myDonorInfo<-fread(file="../../../Data/gene_expression_matrix/columns-samples.csv")
myDonorInfo$weight<-weights$Weight[match(myDonorInfo$donor_name, weights$Donor)]
match(ColNames,myDonorInfo$rna_well_id)
match(ColNames,myDonorInfo$donor_id)
myW<-myDonorInfo$weight[match(as.numeric(gsub(paste("_", tissuename, sep=""), "", colnames(eset.m)) ),myDonorInfo$donor_id)]
myW
fit = lmFit(eset.m, design = design, weights = myW)
volcanoplot(fit.treat, coef = 2, highlight = 10)
fit.eBayes = eBayes(fit)
fit.treat = treat(fit.eBayes, lfc=log2(1.1))
volcanoplot(fit.treat, coef = 2, highlight = 10)
volcanoplot(eset.top, coef = 2, highlight = 10)
eset.top = topTreat(fit.treat,coef=2,number = 1e10)
volcanoplot(eset.top, coef = 2, highlight = 10)
volcanoplot(fit.eBayes, coef = 2, highlight = 10)
rownames(eset.m)
row.names(eset.m)
View(eset.m)
index<- as.numeric(row.names(design))
GeneNames<-eset[,1]
GeneNames
subset<-eset[,-1]
subset2<-subset[,index, with=F]
eset.m<-data.matrix(subset2, rownames.force = GeneNames)
View(eset.m)
rownames(eset.m)<-GeneNames
GeneNames
GeneNames[1]
eset.m<-data.matrix(subset2, rownames.force = GeneNames$gene_symbol)
eset.m<-data.matrix(subset2, rownames.force = GeneNames$gene_symbol)
eset.m<-data.matrix(subset2, rownames.force = GeneNames$gene_symbol)
rownames(eset.m)<-GeneNames$gene_symbol
?t.test
?try
try(eset.tscores<-apply(eset.m, 1, function (x) t.test(x[factors[,factorI]==1],x[factors[,factorI]==0])), silent = T)
View(eset.tscores)
eset.tscores
eset.tscores[[1]]
length(eset.tscores)
nrow(eset.m)
?break
log2(.05)
2^0.05
eset
index<- as.numeric(row.names(design))
GeneNames<-eset[,1]
subset<-eset[,-1]
subset2<-subset[,index, with=F]
eset.m<-data.matrix(subset2)
rownames(eset.m)<-GeneNames$gene_symbol
eset.m<-log2(eset.m)
View(eset.m)
?log2
eset.m[eset.m<0.001]<-0.0001
eset.m<-log2(eset.m)
View(eset.m)
eset.m[eset.m<0.05]<-0.05
eset.m<-log2(eset.m)
View(eset.m)
eset.m[eset.m<0.05]<-1
eset.m<-log2(eset.m)
View(eset.m)
eset
View(eset)
eset.m[eset.m<1]<-1
eset.m<-log2(eset.m)
View(eset)
View(eset.m)
table(eset.m==0)
eset.m<-CleanEsetLimma(design, eset, factors)
index<- as.numeric(row.names(design))
GeneNames<-eset[,1]
subset<-eset[,-1]
subset2<-subset[,index, with=F]
eset.m<-data.matrix(subset2)
rownames(eset.m)<-GeneNames$gene_symbol
eset.m[eset.m<1]<-1
eset.m<-log2(eset.m)
View(eset.m)
?boxplot
boxplot(eset.m[,1:10])
rowsum(eset.m)
rowsum(eset.m, group = NULL)
?rowsum
apply(X = eset.m, MARGIN = 1, sum())
apply(X = eset.m, MARGIN = 1, sum
)
GeneSums<-apply(X = eset.m, MARGIN = 1, sum)
index<- as.numeric(row.names(design))
GeneNames<-eset[,1]
subset<-eset[,-1]
subset2<-subset[,index, with=F]
eset.m<-data.matrix(subset2)
rownames(eset.m)<-GeneNames$gene_symbol
GeneSums<-apply(X = eset.m, MARGIN = 1, sum)
eset.m<-eset.m[GeneSums!=0,]
eset.m[eset.m<1]<-1
eset.m<-log2(eset.m)
dim(eset.m)
boxplot(eset.m[,1:10])
index<- as.numeric(row.names(design))
GeneNames<-eset[,1]
subset<-eset[,-1]
subset2<-subset[,index, with=F]
eset.m<-data.matrix(subset2)
rownames(eset.m)<-GeneNames$gene_symbol
GeneSums<-apply(X = eset.m, MARGIN = 1, median)
index<- as.numeric(row.names(design))
GeneNames<-eset[,1]
subset<-eset[,-1]
subset2<-subset[,index, with=F]
eset.m<-data.matrix(subset2)
rownames(eset.m)<-GeneNames$gene_symbol
#log2 transform data
eset.m[eset.m<1]<-1
eset.m<-log2(eset.m)
GeneMed<-apply(X = eset.m, MARGIN = 1, median)
GeneSum<-apply(X = eset.m, MARGIN = 1, sum)
eset.m<-eset.m[GeneSums!=0,]
View(eset.m)
boxplot(eset.m[,1:10])
index<- as.numeric(row.names(design))
GeneNames<-eset[,1]
subset<-eset[,-1]
subset2<-subset[,index, with=F]
eset.m<-data.matrix(subset2)
rownames(eset.m)<-GeneNames$gene_symbol
#log2 transform data
eset.m[eset.m<1]<-1
eset.m<-log2(eset.m)
GeneMed<-apply(X = eset.m, MARGIN = 1, median)
GeneSum<-apply(X = eset.m, MARGIN = 1, sum)
eset.m<-eset.m[GeneMed!=0,]
boxplot(eset.m[,1:10])
dim(eset.m)
boxplot(eset.m[,10:30])
boxplot(eset.m[,1:90])
boxplot(eset.m[,1:45])
2^5
index<- as.numeric(row.names(design))
GeneNames<-eset[,1]
subset<-eset[,-1]
subset2<-subset[,index, with=F]
eset.m<-data.matrix(subset2)
rownames(eset.m)<-GeneNames$gene_symbol
#log2 transform data
eset.m[eset.m<1]<-1
eset.m<-log2(eset.m)
GeneMed<-apply(X = eset.m, MARGIN = 1, median)
GeneSum<-apply(X = eset.m, MARGIN = 1, sum)
eset.m<-eset.m[GeneMed<4,]
boxplot(eset.m[,1:45])
boxplot(eset.m[,1:45])
index<- as.numeric(row.names(design))
GeneNames<-eset[,1]
subset<-eset[,-1]
subset2<-subset[,index, with=F]
eset.m<-data.matrix(subset2)
rownames(eset.m)<-GeneNames$gene_symbol
#log2 transform data
eset.m[eset.m<1]<-1
eset.m<-log2(eset.m)
GeneMed<-apply(X = eset.m, MARGIN = 1, median)
GeneSum<-apply(X = eset.m, MARGIN = 1, sum)
eset.m<-eset.m[GeneMed>4,]
boxplot(eset.m[,1:45])
dim(eset.m)
index<- as.numeric(row.names(design))
GeneNames<-eset[,1]
subset<-eset[,-1]
subset2<-subset[,index, with=F]
eset.m<-data.matrix(subset2)
rownames(eset.m)<-GeneNames$gene_symbol
#log2 transform data
eset.m[eset.m<1]<-1
eset.m<-log2(eset.m)
GeneMed<-apply(X = eset.m, MARGIN = 1, median)
GeneSum<-apply(X = eset.m, MARGIN = 1, sum)
eset.m<-eset.m[GeneMed>1,]
boxplot(eset.m[,1:45])
dim(eset.m)
?removeBatchEffect
design = model.matrix(~factors[,factorI])
#design = model.matrix(~factors[,factorI])
eset.m<-CleanEsetLimma(design, eset, factors)
#get the weights for the choices of the samples
index<- as.numeric(row.names(design))
myDonorInfo<-readinDonor()
myW<-myDonorInfo$weight[match(as.numeric(gsub(paste("_", tissuename, sep=""), "", colnames(eset.m)) ),myDonorInfo$donor_id)]
fit = lmFit(eset.m, design = design, weights = myW)
fit.eBayes = eBayes(fit)
fit.treat = treat(fit.eBayes, lfc=log2(1.1))
eset.top = topTreat(fit.treat,coef=2,number = 1e10)
fit.eBayes = eBayes(fit)
fit.treat = treat(fit.eBayes, lfc=log2(1.1))
eset.top = topTreat(fit.treat,coef=2,number = 1e10)
fit.treat = treat(fit.eBayes, lfc=log2(1.1))
Warning()
warnings
warnings()
View(eset.m)
CleanEsetLimma<-function(design, eset, factors, removeBE=T){
#make sure dimensions match -> NA's are removed in creating the design
index<- as.numeric(row.names(design))
GeneNames<-eset[,1]
subset<-eset[,-1]
subset2<-subset[,index, with=F]
eset.m<-data.matrix(subset2)
rownames(eset.m)<-GeneNames$gene_symbol
#log2 transform data
eset.m[eset.m<1]<-1
eset.m<-log2(eset.m)
GeneMed<-apply(X = eset.m, MARGIN = 1, median)
GeneSum<-apply(X = eset.m, MARGIN = 1, sum)
eset.m<-eset.m[GeneMed>1,]
#if(removeBE==T) eset.m<-removeBatchEffect(eset.m, factors$SEX[index])
return(eset.m)
}
design = model.matrix(~factors[,factorI])
eset.m<-CleanEsetLimma(design, eset, factors)
index<- as.numeric(row.names(design))
myDonorInfo<-readinDonor()
myW<-myDonorInfo$weight[match(as.numeric(gsub(paste("_", tissuename, sep=""), "", colnames(eset.m)) ),myDonorInfo$donor_id)]
fit = lmFit(eset.m, design = design, weights = myW)
fit.eBayes = eBayes(fit)
fit.treat = treat(fit.eBayes, lfc=log2(1.1))
eset.top = topTreat(fit.treat,coef=2,number = 1e10)
View(eset.top)
names(factors)[factorI]
qqt(eset.top)
qqt(eset.top)
qqt(eset.top$t)
fit.treat$df.total
qqt(fit.eBayes$t[,2],df=fit.eBayes$df.residual+fit.eBayes$df.prior)
abline(0,1)
qqt(fit.treat$t[,2],df=fit.treat$df.residual+fit.treat$df.prior)
abline(0,1)
myval<-fit.treat$t[fit.treat$t!=0,2]
myval<-fit.treat$t[,2]
myval<-myval[myval!=0]
qqt(myval,df=fit.treat$df.residual+fit.treat$df.prior)
abline(0,1)
names(factors[factorI])
tissuename
rownames(fit.eBayes)
rownames(fit.treat)
volcanoplot(fit.treat, coef = 2, highlight = 10)
?volcanoplot
fit.eBayes$F
volcanoplot(fit.eBayes, coef = 2, highlight = 10, names = rownames(fit.eBayes))
View(eset.top)
?heatmap
3450-1896
source('~/.active-rstudio-document')
library(Biobase)
library(GEOquery)
library(limma)
gset <- getGEO("GSE9566", GSEMatrix =TRUE, AnnotGPL=TRUE)
if (length(gset) > 1) idx <- grep("GPL1261", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
fvarLabels(gset) <- make.names(fvarLabels(gset))
gsms <- "00000000010101000000000101100011000011"
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
ex <- exprs(gset)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0) ||
(qx[2] > 0 && qx[2] < 1 && qx[4] > 1 && qx[4] < 2)
if (LogC) { ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex) }
sml <- paste("G", sml, sep="")    # set group names
fl <- as.factor(sml)
gset$description <- fl
fl
design <- model.matrix(~ description + 0, gset)
colnames(design) <- levels(fl)
fit <- lmFit(gset, design)
cont.matrix <- makeContrasts(G1-G0, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=250)
tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","t","B","logFC","Gene.symbol","Gene.title"))
write.table(tT, file=stdout(), row.names=F, sep="\t")
write.table(tT, file="~/Desktop/CATS/Barres GEO2R/raw.csv", row.names=F, sep=",")
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=10e10)
tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","t","B","logFC","Gene.symbol","Gene.title"))
write.table(tT, file="~/Desktop/CATS/Barres GEO2R/raw.csv", row.names=F, sep=",")
library(data.table)
library(GEOquery)
setwd("~/Dropbox (Partners HealthCare)/MSBB/Mouse/GSE9566/")
library(limma)
if(base::exists("myExprs")==F){myExprs<-getGEO(GEO = "GSE9566")}
Exprs1<-myExprs$`GSE9566-GPL1261_series_matrix.txt.gz`
rm(myExprs)
Exprs1.phenoData<-pData(phenoData(Exprs1))
defFactors<-function(title){
#filter into different categories p indicates the post-natal days
#Astro's P7-P8
index<-grep(x=title,pattern="Astros P[1-8] ")
tempvec<-rep(0, length(title))
tempvec[index]<-1
myFactors<-data.frame(factor(tempvec))
names(myFactors)<-"AstroP7"
#Astro's P17
index<-grep(x=title, pattern="Astros P[1][7] |Astros P[3][0]")
tempvec<-rep(0, length(title))
tempvec[index]<-1
myFactors$AstroP17<-factor(tempvec)
#Astro's P17-grey matter (P17g)
index<-grep(x=title,pattern="Astros P17g ")
tempvec<-rep(0, length(title))
tempvec[index]<-1
myFactors$AstroP17g<-factor(tempvec)
#Neurons P7
index<-grep(x=title,pattern="Neurons P[0-7] ")
tempvec<-rep(0, length(title))
tempvec[index]<-1
myFactors$NeuronsP7 <-factor(tempvec)
# Neurons P17
index<-grep(x=title,pattern="Neurons P[1-3][0-9] ")
tempvec<-rep(0, length(title))
tempvec[index]<-1
myFactors$NeuronsP17<-factor(tempvec)
# Neurons endothelial cell depleted P7n P17n
index<-grep(x=title,pattern="Neurons P[0-9][0-9]n ")
tempvec<-rep(0, length(title))
tempvec[index]<-1
myFactors$NeuronsP7n<-factor(tempvec)
# OPC's
index<-grep(x=title,pattern="OPCs")
tempvec<-rep(0, length(title))
tempvec[index]<-1
myFactors$OPCs<-factor(tempvec)
# GalC-OL's
#  galactocerebroside (GalC) first Oligodendrocyte specific marker to be expressed
index<-grep(x=title,pattern="OLs.*GC_[a-z]")
tempvec<-rep(0, length(title))
tempvec[index]<-1
myFactors$GalCOLs<-factor(tempvec)
#MOG-OL's
# MOG is a marker for mature Oligodendrocytes
index<-grep(x=title,pattern="Myelin OLs.*MOG_[a-z]")
tempvec<-rep(0, length(title))
tempvec[index]<-1
myFactors$MOGOLs<-factor(tempvec)
return(myFactors)
}
Exprs1.factors<-defFactors(as.vector(Exprs1.phenoData$title))
Astros<-ifelse(Exprs1.factors$AstroP7==1|Exprs1.factors$AstroP17==1|Exprs1.factors$AstroP17g==1, 1, 0)
Neurons<-ifelse(Exprs1.factors$NeuronsP7==1|Exprs1.factors$NeuronsP17==1|Exprs1.factors$NeuronsP7n==1, 1, 0)
OLs<-ifelse(Exprs1.factors$OPCs==1|Exprs1.factors$MOGOLs==1|Exprs1.factors$GalCOLs==1, 1, 0)
DiffExpr<-function(Factors, Eset, genelist, name){
Eset.featureData<-pData(featureData(Eset))
design<-model.matrix(~Factors)
eset.fit<-lmFit(exprs(Eset), design)
eset.eBayes<-eBayes(eset.fit)
eset.top<-topTable(eset.eBayes, coef=2, number = 10e10, genelist=Eset.featureData$`Gene Symbol`)
png(paste(name, "_Volcano.png", sep=""))
volcanoplot(eset.eBayes, coef=2, highlight = 10, names = Eset.featureData$`Gene Symbol`, main=name)
dev.off()
png(paste(name,"_StudentsT_QQ.png", sep=""))
qqt(eset.eBayes$t,df=eset.eBayes$df.residual+eset.eBayes$df.prior)
abline(0,1)
dev.off()
filename=paste("GSE9566_FB_BARRES_ARRAYEXP", "_", name,".csv", sep="")
Index<-match(rownames(eset.top), GPL1261_joined$`AFFY Mouse430 2 probe`)
eset.top$GeneSymbol<-GPL1261_joined$`Human gene name`[Index]
eset.top$ProbeID<-rownames(eset.top)
eset.top$Mouse_Ortholog<-GPL1261_joined$`Gene name`[Index]
eset.top$Mouse_Ensembl<-GPL1261_joined$`Gene stable ID`[Index]
#eset.top$Mouse_Entrez<-Eset.featureData$ENTREZ_GENE_ID
names(eset.top)[which(names(eset.top)=="P.Value")]<-"PValue"
names(eset.top)[which(names(eset.top)=="adj.P.Val")]<-"adjPValue"
#add platform number and GSE as collumns
eset.top$FileName<-rep(filename,nrow(eset.top))
eset.top$Platform<-rep("GPL1261", nrow(eset.top))
eset.top$DatasetTitle<-rep("GSE9566_FB_BARRES_ARRAYEXP", nrow(eset.top))
eset.top$AnalysisTitle<-rep(name, nrow(eset.top))
#write out the top table
fwrite(eset.top[,c("ProbeID", "Mouse_Ensembl", "GeneSymbol", "Mouse_Ortholog", "logFC", "t",
"PValue", "adjPValue", "B", "FileName", "DatasetTitle")],
row.names = F, col.names = T,file=filename, sep=",")
}
setwd("~/Desktop/CATS/Barres GEO2R/")
DiffExpr<-function(Factors, Eset, genelist, name){
Eset.featureData<-pData(featureData(Eset))
design<-model.matrix(~Factors)
eset.fit<-lmFit(exprs(Eset), design)
eset.eBayes<-eBayes(eset.fit)
eset.top<-topTable(eset.eBayes, coef=2, number = 10e10, genelist=Eset.featureData$`Gene Symbol`)
png(paste(name, "_Volcano.png", sep=""))
volcanoplot(eset.eBayes, coef=2, highlight = 10, names = Eset.featureData$`Gene Symbol`, main=name)
dev.off()
png(paste(name,"_StudentsT_QQ.png", sep=""))
qqt(eset.eBayes$t,df=eset.eBayes$df.residual+eset.eBayes$df.prior)
abline(0,1)
dev.off()
filename=paste("GSE9566_FB_BARRES_ARRAYEXP", "_", name,".csv", sep="")
#Index<-match(rownames(eset.top), GPL1261_joined$`AFFY Mouse430 2 probe`)
#eset.top$GeneSymbol<-GPL1261_joined$`Human gene name`[Index]
#eset.top$ProbeID<-rownames(eset.top)
#eset.top$Mouse_Ortholog<-GPL1261_joined$`Gene name`[Index]
#eset.top$Mouse_Ensembl<-GPL1261_joined$`Gene stable ID`[Index]
#eset.top$Mouse_Entrez<-Eset.featureData$ENTREZ_GENE_ID
names(eset.top)[which(names(eset.top)=="P.Value")]<-"PValue"
names(eset.top)[which(names(eset.top)=="adj.P.Val")]<-"adjPValue"
#add platform number and GSE as collumns
eset.top$FileName<-rep(filename,nrow(eset.top))
eset.top$Platform<-rep("GPL1261", nrow(eset.top))
eset.top$DatasetTitle<-rep("GSE9566_FB_BARRES_ARRAYEXP", nrow(eset.top))
eset.top$AnalysisTitle<-rep(name, nrow(eset.top))
#write out the top table
fwrite(eset.top[,c("ProbeID", "Mouse_Ortholog", "logFC", "t",
"PValue", "adjPValue", "B", "FileName", "DatasetTitle")],
row.names = F, col.names = T,file=filename, sep=",")
}
DiffExpr(Astros, Exprs1, genelist, "AstrosvsAll")
Factors = Astros
Eset = Exprs1
design<-model.matrix(~Factors)
eset.fit<-lmFit(exprs(Eset), design)
eset.eBayes<-eBayes(eset.fit)
eset.top<-topTable(eset.eBayes, coef=2, number = 10e10, genelist=Eset.featureData$`Gene Symbol`)
Eset.featureData<-pData(featureData(Eset))
design<-model.matrix(~Factors)
eset.fit<-lmFit(exprs(Eset), design)
eset.eBayes<-eBayes(eset.fit)
eset.top<-topTable(eset.eBayes, coef=2, number = 10e10, genelist=Eset.featureData$`Gene Symbol`)
filename=paste("GSE9566_FB_BARRES_ARRAYEXP", "_", name,".csv", sep="")
names(eset.top)[which(names(eset.top)=="P.Value")]<-"PValue"
names(eset.top)[which(names(eset.top)=="adj.P.Val")]<-"adjPValue"
name = "ASTROS"
filename=paste("GSE9566_FB_BARRES_ARRAYEXP", "_", name,".csv", sep="")
names(eset.top)[which(names(eset.top)=="P.Value")]<-"PValue"
names(eset.top)[which(names(eset.top)=="adj.P.Val")]<-"adjPValue"
eset.top$FileName<-rep(filename,nrow(eset.top))
eset.top$Platform<-rep("GPL1261", nrow(eset.top))
eset.top$DatasetTitle<-rep("GSE9566_FB_BARRES_ARRAYEXP", nrow(eset.top))
eset.top$AnalysisTitle<-rep(name, nrow(eset.top))
fwrite(eset.top[,c("ProbeID", "Mouse_Ortholog", "logFC", "t",
"PValue", "adjPValue", "B", "FileName", "DatasetTitle")],
row.names = F, col.names = T,file=filename, sep=",")
names(ese.top)
names(eset.top)
View(eset.top)
fwrite(eset.top, file=filename, row.names=T)
raw = fread("raw.csv", header = T)
rownames(raw)
View(raw)
table(raw$ID == eset.top$ID)
eset.top$ID
rownames(eset.top)
table(raw$ID == rownames(eset.top))
table(raw$adj.P.Val == eset.top$adjPValue)
DiffExpr<-function(Factors, Eset, name){
Eset.featureData<-pData(featureData(Eset))
design<-model.matrix(~Factors)
eset.fit<-lmFit(exprs(Eset), design)
eset.eBayes<-eBayes(eset.fit)
eset.top<-topTable(eset.eBayes, coef=2, number = 10e10, genelist=Eset.featureData$`Gene Symbol`)
fwrite(eset.top, file=paste(name,".csv"), row.names=T)
}
source('~/Desktop/CATS/Barres GEO2R/DiffExpress_GSE9566.R')
View(eset.top)
rownames(ese.top)
table(raw$ID == rownames(eset.top))
raw$P.Value == eset.top$PValue
table(raw$P.Value == eset.top$PValue)
GEO2R = fread("raw.csv", header = T)
MYoutput = fread("GSE9566_FB_BARRES_ARRAYEXP_ASTROS.csv", header = T)
View(MYoutput)
table(GEO2R$ID == MYoutput$V1)
hist(MYoutput$logFC-GEO2R$logFC)
hist(MYoutput$PValue-GEO2R$P.Value)
hist(MYoutput$t-GEO2R$t)
summary(MYoutput$logFC-GEO2R$logFC)
hist(MYoutput$adjPValue-GEO2R$t)
hist(MYoutput$adjPValue-GEO2R$adj.P.Val)
summary(MYoutput$logFC-GEO2R$logFC)
summary(MYoutput$PValue-GEO2R$P.Value)
summary(MYoutput$t-GEO2R$t)
summary(MYoutput$adjPValue-GEO2R$adj.P.Val)
range(MYoutput$logFC-GEO2R$logFC)
range(MYoutput$PValue-GEO2R$P.Value)
range(MYoutput$t-GEO2R$t)
range(MYoutput$adjPValue-GEO2R$adj.P.Val)
