linfit = glm(formula = NeuritePHF1 ~ Compound_conc + PlateReplicates, data=RF.pass)
linfit$coefficients
linfit = glm(formula = NeuritePHF1 ~ Compound_conc, data=RF.pass)
linfit$coefficients
as.vector(linfit$coefficients)
as.vector(linfit$coefficients)[-1]
hist(as.vector(linfit$coefficients)[-1])
glm(formula = NeuritePHF1 ~ Compound_conc + PlateReplicates,  family = "poisson", data=rounded)
poisfit = glm(formula = NeuritePHF1 ~ Compound_conc,  family = "poisson", data=rounded)
poisfit$effects
setwd("~/Dropbox (Partners HealthCare)/MSBB/Mouse 2.0/HumanGeneAdded/")
list.files
list.files()
myfiles = list.files()
myfiles[myfiles!="upload.sh"]
?topTable
filelist = myfiles[myfiles!="upload.sh"]
filelist[1]
fileName = filelist[1]
resultFile = fread(fileName, sep = ",", header =T)
# control: 3 CKp25_2wk
# case: 3 CKp25_6wk
library(DESeq2)
setwd("~/Dropbox (Partners HealthCare)/MSBB/Mouse 2.0/MouseResults/")
if(dir.exists("Data")==FALSE){
dir.create("Data")
download.file("https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE65159&format=file&file=GSE65159%5FrnaSeqCount%2Etxt%2Egz", destfile = "Data/rnaseq.txt")
}
gset = read.table("Data/rnaseq.txt")
CKp25_2wk = c(10,11,12)
CKp25_6wk = c(4,5,6)
exclude = -dim(gset)[1]:-(dim(gset)[1]-5)
gset.selection<-gset[exclude,c(CKp25_2wk, CKp25_6wk)]
condition <- factor(c("Control","Control", "Control","Case","Case","Case"))
condition <- relevel(condition, ref = "Control")
dds<- DESeqDataSetFromMatrix(countData = gset.selection,
colData = DataFrame(condition),
design = ~condition)
#dds <- dds[ rowSums(counts(dds)) > 20, ]
#index = as.vector(which(apply(X = counts(dds), FUN = function(x) all(x>20), MARGIN = 1)))
#dds <- dds[index, ]
dds.deseq<-DESeq(dds)
?results
dds.results<-results(dds.deseq)
setwd("~/Dropbox (Partners HealthCare)/MSBB/Mouse 2.0/HumanGeneAdded/")
library(data.table)
myfiles = list.files()
filelist = myfiles[myfiles!="upload.sh"]
fileName = filelist[1]
resultFile = fread(fileName, sep = ",", header =T)
names(resultFile)
resultFile$adjPValue<0.05
resultFile[resultFile$adjPValue<0.05, ]
i
i
resultFile = fread(fileName, sep = ",", header =T, stringsAsFactors = F)
resultFile[resultFile$adjPValue<0.05, ]
dim(selection)
selection = resultFile[resultFile$adjPValue<0.05, ]
dim(selection)
dim(selection)[1]
takeBestWrite = function(fileName) {
resultFile = fread(fileName, sep = ",", header =T, stringsAsFactors = F)
outputName = paste("../Mongo/", fileName, sep="")
selection = resultFile[resultFile$adjPValue<0.05, ]
if(dim(selection)[1]<100){
fwrite(x = selection, file = outputName, col.names = T, row.names = T, sep=",")
}
else{
fwrite(x = selection[1:100, ], file = outputName, col.names = T, row.names = F, sep=",")
}
}
takeBestWrite(filelist[1])
lapply(X=filelist, FUN = function(x) takeBestWrite(x))
setwd("~/Dropbox (Partners HealthCare)/CNL_massCATS/ML/Full Output/")
library(data.table)
library(ggplot2)
library(sva)
RawFields = readxl::read_excel("C3265_Summary_SR102417.xlsx", sheet="FieldData")
RF.pass = RawFields[RawFields$StatsPass!="Low", ]
RF.low = RawFields[RawFields$StatsPass=="Low", ]
rm(RawFields)
Sel = as.matrix( RF.pass[, c("NeuritePHF1", "CellPHF1", "NeuriteK9JA", "CellK9JA", "NeuriteArea", "CellbodyCount", "NucCount")])
pairs(Sel)
results = prcomp(Sel)
pairs(results$x)
boxplot( NeuritePHF1 ~ Compound, data = RF.pass)
b
boxplot( NeuritePHF1 ~ FieldNo, data = RF.pass)
Sel = as.matrix( RF.pass[, c("NeuritePHF1", "CellPHF1", "NeuriteK9JA", "CellK9JA", "NeuriteArea", "CellbodyCount", "NucCount")])
Zscores = readxl::read_excel("C3265_Summary_SR102417.xlsx", sheet="SummaryQCData")
names(Zscores)
Sel = as.matrix( Zscore[, c("mean_zscore_NeuritePHF1", "mean_zscore_NeuriteK9JA", "mean_zscore_CellK9JA", "mean_zscore_CellPHF1")])
Sel = as.matrix( Zscores[, c("mean_zscore_NeuritePHF1", "mean_zscore_NeuriteK9JA", "mean_zscore_CellK9JA", "mean_zscore_CellPHF1")])
pairs(Sel)
results = prcomp(Sel, center = T, scale. = T)
results = prcomp(Sel)
pairs(results$x)
boxplot.stats(Sel[1,])
boxplot.stats(Sel[1,])$out
apply(X=Sel, MARGIN = 1, FUN = function(x) boxplot.stats(x) )
apply(X=Sel, MARGIN = 1, FUN = function(x) boxplot.stats(x)$out )
apply(X=Sel, Margin = 1, FUN = function(x) scores(x))
apply(X=Sel, MARGIN =  = 1, FUN = function(x) scores(x))
apply(X=Sel, MARGIN = 1, FUN = function(x) scores(x))
apply(X=Sel, MARGIN = 1, FUN = function(x) scores(x))
?scores
apply(X=Sel, MARGIN = 1, FUN = function(x) zscore(x))
apply(X=Sel, MARGIN = 1, FUN = function(x) base::zscore(x))
apply(X=Sel, MARGIN = 1, FUN = function(x) (x-mean(x))/sd(x))
zScoreMat = apply(X=Sel, MARGIN = 1, FUN = function(x) (x-mean(x))/sd(x))
apply(X=zScoreMat, MARGIN = 1, FUN = function(x) x>3 || x<-3)
apply(X=zScoreMat, MARGIN = 1, FUN = function(x) x>3 || x<-3)
install.packages("outliers")
apply(X = Sel, MARGIN = 1, FUN = function(x) chisq.out.test(x))
library(outliers)
apply(X = Sel, MARGIN = 1, FUN = function(x) chisq.out.test(x))
apply(X = Sel, MARGIN = 1, FUN = function(x) chisq.out.test(x)$p-value)
Test = lapply(X = Sel, MARGIN = 1, FUN = function(x) chisq.out.test(x))
cochran.test(Sel[1,], inlying = T)
setwd("~/Dropbox (Partners HealthCare)/CNL_massCATS/ML/FlaskMockup/APIrequests/")
library(data.table)
KiNativ = fread("HMS-LINCS_KiNativDatasets_20160915.xlsx")
KinomeScan = fread("HMS-LINCS_KinomeScan_Datasets_2017-10-23.xlsx")
KiNativ = readxl::read_excel("HMS-LINCS_KiNativDatasets_20160915.xlsx")
KinomeScan = readxl::read_excel("HMS-LINCS_KinomeScan_Datasets_2017-10-23.xlsx")
Targets = fread("nominalTargetsLINCS.csv")
View(Targets)
KiNativ = readxl::read_excel("HMS-LINCS_KiNativDatasets_20160915.xlsx")
KinomeScan = readxl::read_excel("HMS-LINCS_KinomeScan_Datasets_2017-10-23.xlsx")
SmallMolecule = fread("small_molecule_20171114165314.csv")
Targets = fread("nominalTargetsLINCS.csv")
index = which(SmallMolecule$`HMS LINCS ID`==Targets$`Small Molecule HMS LINCS ID`)
index = match(SmallMolecule$`HMS LINCS ID`,Targets$`Small Molecule HMS LINCS ID`)
indez
index
View(SmallMolecule)
index = match(SmallMolecule$`HMS LINCS ID`,Targets$`Small Molecule HMS LINCS ID`)
match(Targets$`Small Molecule HMS LINCS ID`, SmallMolecule$`HMS LINCS ID`)
index = match(Targets$`Small Molecule HMS LINCS ID`, SmallMolecule$`HMS LINCS ID`)
names(SmallMolecule)
names(Targets)
targetSubset = Targets[,c('Protein Name', 'Protein HMS LINCS ID','Effective Concentration', 'Key References')]
names(SmallMolecule)
cbind( SmallMolecule[index, -c("Date Publicly Available", "Most Recent Update")],
df1 = Targets[,c('Protein Name', 'Protein HMS LINCS ID','Effective Concentration', 'Key References')]
df1
SmallMolecule[index, -c("Date Publicly Available", "Most Recent Update")]
View(SmallMolecule)
table(SmallMolecule$`Relevant Citations`)
df2 = SmallMolecule[index, -c("Date Publicly Available", "Most Recent Update", "Relevant Citations")]
df1 = Targets[,c('Protein Name', 'Protein HMS LINCS ID','Effective Concentration', 'Key References')]
df2 = SmallMolecule[index, -c("Date Publicly Available", "Most Recent Update", "Relevant Citations")]
cbind(df1, df2)
joined = cbind(df1, df2)
names(joined)
names(targets)
names(Targets)
names(SmallMolecule)
df1 = Targets[,c('Protein Name', 'Protein HMS LINCS ID','Effective Concentration', 'Key References', 'Small Molecule Name')]
df2 = SmallMolecule[index, -c("Date Publicly Available", "Most Recent Update", "Relevant Citations")]
joined = cbind(df1, df2)
table(joined$`Small Molecule Name`, joined$Name)
table(joined$`Small Molecule Name`== joined$Name)
df1 = Targets[,c('Protein Name', 'Protein HMS LINCS ID','Effective Concentration', 'Key References')]
df2 = SmallMolecule[index, -c("Date Publicly Available", "Most Recent Update", "Relevant Citations")]
joined = cbind(df1, df2)
DFjoined = cbind(df1, df2)
setwd("~/Dropbox (Partners HealthCare)/CNL_massCATS/ML/FlaskMockup/APIrequests/")
library(data.table)
KiNativ = readxl::read_excel("HMS-LINCS_KiNativDatasets_20160915.xlsx")
KinomeScan = readxl::read_excel("HMS-LINCS_KinomeScan_Datasets_2017-10-23.xlsx")
SmallMolecule = fread("small_molecule_20171114165314.csv")
Targets = fread("nominalTargetsLINCS.csv")
index = match(Targets$`Small Molecule HMS LINCS ID`, SmallMolecule$`HMS LINCS ID`)
df1 = Targets[,c('Protein Name', 'Protein HMS LINCS ID','Effective Concentration', 'Key References')]
df2 = SmallMolecule[index, -c("Date Publicly Available", "Most Recent Update", "Relevant Citations")]
DFjoined = cbind(df1, df2)
names(KiNativ)
View(KiNativ)
names(DFjoined)
table(DFjoined$`HMS LINCS ID`==DFjoined$`LINCS ID`)
DFjoined$`HMS LINCS ID`
DFjoined$`LINCS ID`
names(SmallMolecule)
names(Targets)
df1 = SmallMolecule[index, c(2:11)]
df2 = Targets[,c(1,3:6)]
DFjoined = cbind(df1, df2)
names(DFjoined)
View(DFjoined)
names(DFjoined)[15] = "targetKeyReferences"
names(KiNativ)
which(DFjoined$`LINCS ID`, KiNativ$LINCS_small_molecule_id)
match(DFjoined$`LINCS ID`, KiNativ$LINCS_small_molecule_id)
match(DFjoined$Name, KiNativ$LINCS_primary_compound_name)
names(KiNativ)
View(KinomeScan)
names(KinomeScan)
DFjoined[,'KiNativURL'] = KiNativ[match(DFjoined$Name, KiNativ$LINCS_primary_compound_name), 5]
DFjoined[,'KinomeScan'] = KinomeScan[match(DFjoined$Name, KinomeScan$sm_name), 6]
View(DFjoined)
names(DFjoined)
names(Targets)
source('~/Dropbox (Partners HealthCare)/CNL_massCATS/ML/FlaskMockup/APIrequests/Joining Data/RCombinding.R')
setwd("~/Dropbox (Partners HealthCare)/CNL_massCATS/ML/FlaskMockup/APIrequests/Joining Data/")
library(data.table)
KiNativ = readxl::read_excel("HMS-LINCS_KiNativDatasets_20160915.xlsx")
KinomeScan = readxl::read_excel("HMS-LINCS_KinomeScan_Datasets_2017-10-23.xlsx")
SmallMolecule = fread("small_molecule_20171114165314.csv")
Targets = fread("nominalTargetsLINCS.csv")
index = match(Targets$`Small Molecule HMS LINCS ID`, SmallMolecule$`HMS LINCS ID`)
df1 = SmallMolecule[index, c(2:11)]
df2 = Targets[,c(1,3:6)]
DFjoined = cbind(df1, df2)
names(DFjoined)[15] = "targetKeyReferences"
DFjoined[,'KiNativURL'] = KiNativ[match(DFjoined$Name, KiNativ$LINCS_primary_compound_name), 5]
DFjoined[,'KinomeScan'] = KinomeScan[match(DFjoined$Name, KinomeScan$sm_name), 6]
names(DFjoined)
fwrite(DFjoined, file = "SmallMoleculesData.csv")
source('~/Dropbox (Partners HealthCare)/CNL_massCATS/ML/FlaskMockup/APIrequests/Joining Data/RCombinding.R')
uniProtID = fread("uniProt.csv")
match(DFjoined$`Protein HMS LINCS ID`,uniProtID$`Protein LINCS ID`)
names(uniProtID)
dim(DFjoined)
index = match(uniProtID$`Protein LINCS ID`, DFjoined$`Protein HMS LINCS ID`)
DFjoined[,'uniProtID'] = uniProtID$uniProtID[index]
DFjoined[,'uniProtID'] = uniProtID$uniProtID[index]
DFjoined[,'uniProtID']
table(is.na(DFjoined$uniProtID))
index
length(index)
index2 = match(uniProtID$`Protein LINCS ID`, DFjoined$`Protein HMS LINCS ID`)
length(index2)
index==index2
View(DFjoined)
source('~/Dropbox (Partners HealthCare)/CNL_massCATS/ML/FlaskMockup/APIrequests/Joining Data/RCombinding.R')
index
DFjoined$`Protein HMS LINCS ID`
length(DFjoined$`Protein HMS LINCS ID`)
length(uniProtID$`Protein LINCS ID`)
match( uniProtID$`Protein LINCS ID`, DFjoined$`Protein HMS LINCS ID`)
length( match( uniProtID$`Protein LINCS ID`, DFjoined$`Protein HMS LINCS ID`))
which(DFjoined$`Protein HMS LINCS ID`==uniProtID$`Protein LINCS ID`)
names(uniProtID)
names(uniProtID)[1]
names(uniProtID)[1] = "Protein HMS LINCS ID"
full_join(DFjoined, uniProtID, by="Protein HMS LINCS ID")
setwd("~/Dropbox (Partners HealthCare)/CNL_massCATS/ML/FlaskMockup/APIrequests/")
library(data.table)
KiNativ = readxl::read_excel("HMS-LINCS_KiNativDatasets_20160915.xlsx")
KinomeScan = readxl::read_excel("HMS-LINCS_KinomeScan_Datasets_2017-10-23.xlsx")
SmallMolecule = fread("small_molecule_20171114165314.csv")
index = match(Targets$`Small Molecule HMS LINCS ID`, SmallMolecule$`HMS LINCS ID`)
Targets = fread("nominalTargetsLINCS.csv")
df1 = SmallMolecule[index, c(2:11)]
df2 = Targets[,c(1,3:6)]
DFjoined = cbind(df1, df2)
names(DFjoined)[15] = "targetKeyReferences"
DFjoined[,'KiNativURL'] = KiNativ[match(DFjoined$Name, KiNativ$LINCS_primary_compound_name), 5]
DFjoined[,'KinomeScan'] = KinomeScan[match(DFjoined$Name, KinomeScan$sm_name), 6]
fwrite(DFjoined, file = "SmallMoleculesData.csv")
uniProtID = fread("uniProt.csv")
index = match(DFjoined$`Protein HMS LINCS ID`,uniProtID$`Protein LINCS ID`)
names(uniProtID)[1] = "Protein HMS LINCS ID"
full_join(DFjoined, uniProtID, by="Protein HMS LINCS ID")
setwd("~/Dropbox (Partners HealthCare)/CNL_massCATS/ML/FlaskMockup/APIrequests/Joining Data/")
library(data.table)
KiNativ = readxl::read_excel("HMS-LINCS_KiNativDatasets_20160915.xlsx")
KinomeScan = readxl::read_excel("HMS-LINCS_KinomeScan_Datasets_2017-10-23.xlsx")
SmallMolecule = fread("small_molecule_20171114165314.csv")
Targets = fread("nominalTargetsLINCS.csv")
index = match(Targets$`Small Molecule HMS LINCS ID`, SmallMolecule$`HMS LINCS ID`)
df1 = SmallMolecule[index, c(2:11)]
df2 = Targets[,c(1,3:6)]
DFjoined = cbind(df1, df2)
names(DFjoined)[15] = "targetKeyReferences"
DFjoined[,'KiNativURL'] = KiNativ[match(DFjoined$Name, KiNativ$LINCS_primary_compound_name), 5]
DFjoined[,'KinomeScan'] = KinomeScan[match(DFjoined$Name, KinomeScan$sm_name), 6]
uniProtID = fread("../uniProt.csv")
names(uniProtID)[1] = "Protein HMS LINCS ID"
DFjoined = full_join(DFjoined, uniProtID, by="Protein HMS LINCS ID")
fwrite(DFjoined, file = "SmallMoleculesData.csv")
source('~/Dropbox (Partners HealthCare)/CNL_massCATS/ML/FlaskMockup/APIrequests/Joining Data/RCombinding.R')
source('~/Dropbox (Partners HealthCare)/CNL_massCATS/ML/FlaskMockup/APIrequests/Joining Data/RCombinding.R')
source('~/Dropbox (Partners HealthCare)/CNL_massCATS/ML/FlaskMockup/APIrequests/Joining Data/RCombinding.R')
source('~/Dropbox (Partners HealthCare)/CNL_massCATS/ML/FlaskMockup/APIrequests/Joining Data/RCombinding.R')
source('~/Dropbox (Partners HealthCare)/CNL_massCATS/ML/FlaskMockup/APIrequests/Joining Data/RCombinding.R')
source('~/Dropbox (Partners HealthCare)/CNL_massCATS/ML/FlaskMockup/APIrequests/Joining Data/RCombinding.R')
source('~/Dropbox (Partners HealthCare)/CNL_massCATS/ML/FlaskMockup/APIrequests/Joining Data/RCombinding.R')
source('~/Dropbox (Partners HealthCare)/CNL_massCATS/ML/FlaskMockup/APIrequests/Joining Data/RCombinding.R')
source('~/Dropbox (Partners HealthCare)/CNL_massCATS/ML/FlaskMockup/APIrequests/Joining Data/RCombinding.R')
source('~/Dropbox (Partners HealthCare)/CNL_massCATS/ML/FlaskMockup/APIrequests/Joining Data/RCombinding.R')
names(SmallMolecule)
source('~/Dropbox (Partners HealthCare)/CNL_massCATS/ML/FlaskMockup/APIrequests/Joining Data/RCombinding.R')
setwd("~/Dropbox (Partners HealthCare)/MSBB/Mouse 2.0/Mongo/")
FileList = list.files(".")
FileList
library(data.table)
example = fread("GSE25926_Muller_APLP2gen1vsWT.csv")
example
example[,!"V1"]
example = fread("GSE56772_BMS_Tg4510_5moVS6mo.csv")
example[,!"V1"]
example
example = fread("GSE56772_BMS_TTAaloneDN_6mo.csv")
example[,!"V1"]
for (file in FileList) {
TempFile = fread(file)
fwrite(TempFile[,!"V1"], file = file)
}
warnings()
?max
for (file in FileList) {
TempFile = fread(file)
if (max(TempFile$adjPValue)>0.05){
stop("Error: max adjPval>0.05")
}
}
setwd("~/Dropbox (Partners HealthCare)/MSBB/Mouse 2.0/Mongo/")
library(data.table)
FileList = list.files(".")
for (file in FileList) {
TempFile = fread(file)
filename = gsub(".csv", "", file)
fwrite(TempFile[,!"V1"], file = paste(filename ,"_top100.csv", sep="") )
}
FileList = list.files(".")
for (file in FileList) {
TempFile = fread(file)
filename = gsub(".csv", "", file)
fwrite(TempFile[,!"V1"], file = paste(filename ,"_top100.csv", sep="") )
}
warnings()
FileList
FileList = list.files(".")
FileList
for (file in FileList) {
TempFile = fread(file)
filename = gsub(".csv", "", file)
filename = gsub("_top100","", filename)
filename = gsub("_top100", "", filename)
fwrite(TempFile, file = paste(filename ,"_top100.csv", sep="") )
}
FileList = list.files(".")
FileList
for (fileName in FileList) {
newName =paste( gsub(".csv", "", fileName), "_top100.csv", sep="")
file.rename(fileName, newName)
#TempFile = fread(file)
#fwrite(TempFile[,!"V1"], file = paste(filename ,"_top100.csv", sep="") )
}
shiny::runApp('~/Dropbox (Partners HealthCare)/CleaningProj/Shiny/Featurize')
source('~/Dropbox (Partners HealthCare)/CleaningProj/Shiny/SimulateData.R', echo=TRUE)
runApp('Featurize')
source('~/Dropbox (Partners HealthCare)/CleaningProj/Shiny/MakeFolderStructure.R', echo=TRUE)
setwd("~/Dropbox (Partners HealthCare)/CleaningProj/Shiny/")
library(data.table)
library(dplyr)
library(tidyr)
library(data.tree)
library(rlist)
MedTree = fread("simple.txt", header = T, sep ="\t", stringsAsFactors = F)
ListOfLists = strsplit(MedTree$c_tooltip, split = " / ") # list of characters vectors
MedTree.Node.full = as.Node(x = MedTree[1:5000,"c_tooltip"], pathName = "c_tooltip",
pathDelimiter = " | ")
MedList = ToListSimple(Meds, nameName = "RxNorm Medication")
Meds <- as.Node(MedTree[,"c_tooltip"], pathName="c_tooltip", pathDelimiter = " | ")
Meds <- as.Node(MedTree[1:5000,"c_tooltip"], pathName="c_tooltip", pathDelimiter = " | ")
MedList <- ToListSimple(Meds)
runApp('Featurize')
SampledMeds
SubsetTree = as.Node(MedTree[MedTree$c_name %in% ChosenSubSample$Medication, "c_tooltip"],
pathName="c_tooltip", pathDelimiter = " / ")
SubsetList = ToListSimple(SubsetTree)
runApp('Featurize')
library(annotationTools)
setwd("~/Dropbox (Partners HealthCare)/MSBB/Mouse 2.0/HumanGeneAdded/MouseToHuman/")
getwd()
setwd("~/Dropbox (Partners HealthCare)/MSBB/Mouse 2.0/HumanGeneAdded/MouseToHuman/")
setwd("~/")
setwd("~/Dropbox (Partners HealthCare)/MSBB/Mouse 2.0/MouseToHuman")
setwd("~/Dropbox (Partners HealthCare)/MSBB/Mouse 2.0/MouseToHuman/ProduceFiles/")
homologene = read.delim("homologene.data", header=FALSE)
all_mouse.genes = read.table("Mus_musculus.gene_info", stringsAsFactors=FALSE, header = TRUE, sep = "\t", quote = "\"", dec = ".", fill = TRUE, comment.char = "")
colnames(all_mouse.genes)
mouse.genes = all_mouse.genes[which("protein-coding" == all_mouse.genes[,10]), ]
human.gid <- getHOMOLOG(mouse.genes$V1, 9606, homologene)
names(mouse.genes)
?getHOMOLOG
human.gid <- getHOMOLOG(mouse.genes$V1, 9606, homologene)
names(mouse.genes)
head(mouse.genes)
human.gid <- getHOMOLOG(mouse.genes$GeneID, 9606, homologene)
human <- sapply(human.gid, paste, collapse=",")
human.mouse <- cbind(human, mouse.genes)
head(human.mouse)
View(human.mouse)
gene_info = fread("Homo_sapiens.gene_info")
setwd("~/Dropbox (Partners HealthCare)/MSBB/Mouse 2.0/MouseToHuman/")
gene_info = fread("Homo_sapiens.gene_info")
gene_info = gene_info[gene_info$type_of_gene=="protein-coding",]
names(human.mouse)
human.mouse[,"MUSENSG"] = sub(".*?(ENSMUSG[0-9]+).*", "\\1", human.mouse[,7], perl=TRUE)
View(human.mouse)
gene_info = gene_info[,c(2,3)]
names(gene_info) = c("ncbiID","HumanGene")
NCBItoSymbol = human.mouse[,c(1,4,18)]
names(NCBItoSymbol) = c("ncbiID", "MouseGene", "MUSENSG")
NCBItoSymbol$ncbiID = as.integer(NCBItoSymbol$ncbiID)
NCBItoSymbol = NCBItoSymbol[!is.na(NCBItoSymbol$ncbiID),]
MouseToHuman = full_join(NCBItoSymbol, gene_info, by="ncbiID")
MouseToHuman %>% distinct(MouseGene, HumanGene, MUSENSG) -> MouseToHuman.unique
write.csv(MouseToHuman.unique, file = "MouseToHumanGenes2.csv", row.names = F)
View(human.gid)
View(human)
human
MouseToHuman.unique
MouseToHuman.unique[,!is.na(MouseToHuman.unique$HumanGene)]
MouseToHuman.unique[!is.na(MouseToHuman.unique$HumanGene),]
source('~/Dropbox (Partners HealthCare)/MSBB/Mouse 2.0/MouseToHuman/MouseToHuman.R', echo=TRUE)
MouseToHuman.unique
gene_info = gene_info[,c(2,3)]
names(gene_info) = c("ncbiID","HumanGene")
gene_info
NCBItoSymbol$ncbiID = as.integer(NCBItoSymbol$ncbiID)
NCBItoSymbol = NCBItoSymbol[!is.na(NCBItoSymbol$ncbiID),]
MouseToHuman = full_join(NCBItoSymbol, gene_info, by="ncbiID")
MouseToHuman
gene_info = fread("Homo_sapiens.gene_info")
gene_info = gene_info[gene_info$type_of_gene=="protein-coding",]
gene_info = gene_info[,c(2,3)]
names(gene_info) = c("ncbiID","HumanGene")
gene_info
NCBItoSymbol = human.mouse[,c(1,4,18)]
names(NCBItoSymbol) = c("ncbiID", "MouseGene", "MUSENSG")
NCBItoSymbol
MouseToHuman = full_join(NCBItoSymbol, gene_info, by="ncbiID")
gene_info$ncbiID = as.integer(gene_info$ncbiID)
gene_info$ncbiID
C
MouseToHuman = full_join(NCBItoSymbol, gene_info, by="ncbiID")
gene_info$ncbiID = as.integer(gene_info$ncbiID)
MouseToHuman = full_join(NCBItoSymbol, gene_info, by="ncbiID")
NCBItoSymbol
typeof(NCBItoSymbol$ncbiID)
typeof(gene_info$ncbiID)
MouseToHuman = full_join(NCBItoSymbol, gene_info, by="ncbiID")
library(dplyr)
MouseToHuman = full_join(NCBItoSymbol, gene_info, by="ncbiID")
NCBItoSymbol$ncbiID = as.integer(NCBItoSymbol$ncbiID)
NCBItoSymbol$ncbiID = as.factor(NCBItoSymbol$ncbiID)
gene_info$ncbiID = as.factor(gene_info$ncbiID)
MouseToHuman = full_join(NCBItoSymbol, gene_info, by="ncbiID")
View(MouseToHuman)
NCBItoSymbol$ncbiID = as.integer(NCBItoSymbol$ncbiID)
gene_info$ncbiID = as.integer(gene_info$ncbiID)
MouseToHuman = full_join(NCBItoSymbol, gene_info, by="ncbiID")
View(MouseToHuman)
setwd("~/Dropbox (Partners HealthCare)/MSBB/Mouse 2.0/MouseToHuman/")
source("http://bioconductor.org/biocLite.R")
biocLite("annotationTools")
setwd("~/Dropbox (Partners HealthCare)/MSBB/Mouse 2.0/MouseToHuman/")
source("http://bioconductor.org/biocLite.R")
biocLite("annotationTools")
# Download full HomoloGene data file from ftp://ftp.ncbi.nlm.nih.gov/pub/HomoloGene/current
homologene = read.delim("homologene.data", header=FALSE)
# ftp://ftp.ncbi.nlm.nih.gov/gene/DATA/gene_info.gz
all_mouse.genes = read.table("Mus_musculus.gene_info", stringsAsFactors=FALSE, header = TRUE, sep = "\t", quote = "\"", dec = ".", fill = TRUE, comment.char = "")
mouse.genes = all_mouse.genes[which("protein-coding" == all_mouse.genes[,10]), ]
human.gid <- getHOMOLOG(mouse.genes$GeneID, 9606, homologene)
human <- sapply(human.gid, paste, collapse=",")
human.mouse <- cbind(human, mouse.genes)
human.git
human.gid
human <- sapply(human.gid, paste, collapse=",")
human.mouse <- cbind(human, mouse.genes)
human.mouse
human.gid <- getHOMOLOG(mouse.genes$GeneID, 9606, homologene)
mouse.genes$GeneID
setwd("~/Dropbox (Partners HealthCare)/MSBB/Mouse 2.0/MouseToHuman/")
homologene = read.delim("homologene.data", header=FALSE)
names(homologene)
all_mouse.genes = read.table("Mus_musculus.gene_info", stringsAsFactors=FALSE, header = TRUE, sep = "\t", quote = "\"", dec = ".", fill = TRUE, comment.char = "")
mouse.genes = all_mouse.genes[which("protein-coding" == all_mouse.genes[,10]), ]
human.gid <- getHOMOLOG(mouse.genes$GeneID, 9606, homologene)
human <- sapply(human.gid, paste, collapse=",")
human.mouse <- cbind(human, mouse.genes)
gene_info = fread("Homo_sapiens.gene_info")
gene_info = gene_info[gene_info$type_of_gene=="protein-coding",]
human.mouse[,"MUSENSG"] = sub(".*?(ENSMUSG[0-9]+).*", "\\1", human.mouse[,7], perl=TRUE)
gene_info = gene_info[,c(2,3)]
names(gene_info) = c("ncbiID","HumanGene")
NCBItoSymbol = human.mouse[,c(1,4,18)]
names(NCBItoSymbol) = c("ncbiID", "MouseGene", "MUSENSG")
NCBItoSymbol$ncbiID = as.integer(NCBItoSymbol$ncbiID)
NCBItoSymbol = NCBItoSymbol[!is.na(NCBItoSymbol$ncbiID),]
gene_info$ncbiID = as.integer(gene_info$ncbiID)
MouseToHuman = full_join(NCBItoSymbol, gene_info, by="ncbiID")
View(MouseToHuman)
View(MouseToHuman)
mouse.genes2 = fread("human.mouse.tab")
head(mouse.genes2)
mouse.genes2 = mouse.genes2[which("protein-coding" == mouse.genes2[,10]), ]
human.git <- getHOMOLOG(mouse.genes2$V1, 9606, homologene)
human.gid <- getHOMOLOG(mouse.genes2$V1, 9606, homologene)
human <- sapply(human.gid, paste, collapse=",")
human.mouse <- cbind(human, mouse.genes)
human
head(mouse.genes2)
mouse.genes2 = fread("human.mouse.tab")
human.gid <- getHOMOLOG(mouse.genes2$V1, 9606, homologene)
